# Simple Dockerfile - Everything from Git
FROM ubuntu:22.04

ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV NODE_ENV=development

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    wget \
    git \
    software-properties-common \
    ca-certificates \
    gnupg \
    supervisor \
    nginx \
    && rm -rf /var/lib/apt/lists/*

# Install Python 3.11
RUN add-apt-repository -y ppa:deadsnakes/ppa && \
    apt-get update && \
    apt-get install -y python3.11 python3.11-venv python3.11-dev python3-pip && \
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1 && \
    rm -rf /var/lib/apt/lists/*

# Install Node.js 20.x
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
    apt-get install -y nodejs && \
    npm install -g yarn && \
    rm -rf /var/lib/apt/lists/*

# Install MongoDB
RUN curl -fsSL https://www.mongodb.org/static/pgp/server-7.0.asc | \
    gpg -o /usr/share/keyrings/mongodb-server-7.0.gpg --dearmor && \
    echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-7.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse" | \
    tee /etc/apt/sources.list.d/mongodb-org-7.0.list && \
    apt-get update && \
    apt-get install -y mongodb-org && \
    rm -rf /var/lib/apt/lists/*

# Create directories
RUN mkdir -p /data/db /var/log/supervisor

# Clone application
ARG GIT_REPO
ARG GIT_BRANCH=main
RUN git clone -b ${GIT_BRANCH} ${GIT_REPO} /app

# Install Python dependencies
RUN cd /app/backend && \
    python3 -m venv /app/venv && \
    /app/venv/bin/pip install --upgrade pip && \
    (grep -v "emergentintegrations" requirements.txt > requirements_clean.txt 2>/dev/null || cp requirements.txt requirements_clean.txt) && \
    /app/venv/bin/pip install -r requirements_clean.txt

# Install Node.js dependencies
RUN cd /app/frontend && \
    yarn install --frozen-lockfile --network-timeout 300000

# Create supervisor config
RUN echo '[supervisord]\n\
nodaemon=true\n\
logfile=/var/log/supervisor/supervisord.log\n\
pidfile=/var/run/supervisord.pid\n\
user=root\n\
\n\
[program:mongodb]\n\
command=/usr/bin/mongod --bind_ip_all --dbpath /data/db\n\
autostart=true\n\
autorestart=true\n\
stderr_logfile=/var/log/supervisor/mongodb.err.log\n\
stdout_logfile=/var/log/supervisor/mongodb.out.log\n\
priority=1\n\
startsecs=10\n\
\n\
[program:backend]\n\
command=/app/venv/bin/uvicorn server:app --host 0.0.0.0 --port 8001 --workers 2\n\
directory=/app/backend\n\
autostart=true\n\
autorestart=true\n\
stderr_logfile=/var/log/supervisor/backend.err.log\n\
stdout_logfile=/var/log/supervisor/backend.out.log\n\
priority=10\n\
startsecs=5\n\
\n\
[program:frontend]\n\
command=yarn start\n\
directory=/app/frontend\n\
autostart=true\n\
autorestart=true\n\
stderr_logfile=/var/log/supervisor/frontend.err.log\n\
stdout_logfile=/var/log/supervisor/frontend.out.log\n\
environment=HOST="0.0.0.0",PORT="3000",BROWSER="none"\n\
priority=20\n\
startsecs=10\n\
\n\
[program:nginx]\n\
command=/usr/sbin/nginx -g "daemon off;"\n\
autostart=true\n\
autorestart=true\n\
stderr_logfile=/var/log/supervisor/nginx.err.log\n\
stdout_logfile=/var/log/supervisor/nginx.out.log\n\
priority=30\n\
startsecs=5' > /etc/supervisor/conf.d/supervisord.conf

# Create nginx config
RUN echo 'server {\n\
    listen 80 default_server;\n\
    server_name _;\n\
    \n\
    location / {\n\
        proxy_pass http://localhost:3000;\n\
        proxy_http_version 1.1;\n\
        proxy_set_header Upgrade $http_upgrade;\n\
        proxy_set_header Connection "upgrade";\n\
        proxy_set_header Host $host;\n\
        proxy_cache_bypass $http_upgrade;\n\
    }\n\
    \n\
    location /api {\n\
        proxy_pass http://localhost:8001;\n\
        proxy_http_version 1.1;\n\
        proxy_set_header Host $host;\n\
    }\n\
}' > /etc/nginx/sites-available/default

# Create startup script
RUN echo '#!/bin/bash\n\
set -e\n\
\n\
# Create .env files if they do not exist\n\
if [ ! -f /app/backend/.env ]; then\n\
    echo "MONGO_URL=${MONGO_URL:-mongodb://localhost:27017}" > /app/backend/.env\n\
    echo "DB_NAME=${DB_NAME:-app_database}" >> /app/backend/.env\n\
    echo "CORS_ORIGINS=${CORS_ORIGINS:-*}" >> /app/backend/.env\n\
fi\n\
\n\
if [ ! -f /app/frontend/.env ]; then\n\
    echo "REACT_APP_BACKEND_URL=${BACKEND_URL:-http://localhost:8001}" > /app/frontend/.env\n\
    echo "PORT=3000" >> /app/frontend/.env\n\
fi\n\
\n\
echo "Backend .env:"\n\
cat /app/backend/.env\n\
echo ""\n\
echo "Frontend .env:"\n\
cat /app/frontend/.env\n\
echo ""\n\
echo "Starting services..."\n\
exec /usr/bin/supervisord -n -c /etc/supervisor/supervisord.conf' > /start.sh && \
    chmod +x /start.sh

EXPOSE 80 3000 8001 27017

HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8001/api/ || exit 1

CMD ["/start.sh"]
